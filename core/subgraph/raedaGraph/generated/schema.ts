// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class profileEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save profileEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type profileEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("profileEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): profileEvent | null {
    return changetype<profileEvent | null>(
      store.get("profileEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _userId(): BigInt {
    let value = this.get("_userId");
    return value!.toBigInt();
  }

  set _userId(value: BigInt) {
    this.set("_userId", Value.fromBigInt(value));
  }

  get _waterType(): i32 {
    let value = this.get("_waterType");
    return value!.toI32();
  }

  set _waterType(value: i32) {
    this.set("_waterType", Value.fromI32(value));
  }

  get _userName(): string {
    let value = this.get("_userName");
    return value!.toString();
  }

  set _userName(value: string) {
    this.set("_userName", Value.fromString(value));
  }

  get _summary(): string {
    let value = this.get("_summary");
    return value!.toString();
  }

  set _summary(value: string) {
    this.set("_summary", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class bidEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save bidEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type bidEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("bidEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): bidEvent | null {
    return changetype<bidEvent | null>(store.get("bidEvent", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _bidId(): BigInt {
    let value = this.get("_bidId");
    return value!.toBigInt();
  }

  set _bidId(value: BigInt) {
    this.set("_bidId", Value.fromBigInt(value));
  }

  get _accepted(): boolean {
    let value = this.get("_accepted");
    return value!.toBoolean();
  }

  set _accepted(value: boolean) {
    this.set("_accepted", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class bucketEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save bucketEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type bucketEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("bucketEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): bucketEvent | null {
    return changetype<bucketEvent | null>(
      store.get("bucketEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _category(): string {
    let value = this.get("_category");
    return value!.toString();
  }

  set _category(value: string) {
    this.set("_category", Value.fromString(value));
  }

  get _bucketValType(): i32 {
    let value = this.get("_bucketValType");
    return value!.toI32();
  }

  set _bucketValType(value: i32) {
    this.set("_bucketValType", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class postEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save postEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type postEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("postEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): postEvent | null {
    return changetype<postEvent | null>(
      store.get("postEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _live(): boolean {
    let value = this.get("_live");
    return value!.toBoolean();
  }

  set _live(value: boolean) {
    this.set("_live", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class riverbidEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save riverbidEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type riverbidEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("riverbidEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): riverbidEvent | null {
    return changetype<riverbidEvent | null>(
      store.get("riverbidEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _bidId(): BigInt {
    let value = this.get("_bidId");
    return value!.toBigInt();
  }

  set _bidId(value: BigInt) {
    this.set("_bidId", Value.fromBigInt(value));
  }

  get _accepted(): boolean {
    let value = this.get("_accepted");
    return value!.toBoolean();
  }

  set _accepted(value: boolean) {
    this.set("_accepted", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class riverbucketEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save riverbucketEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type riverbucketEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("riverbucketEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): riverbucketEvent | null {
    return changetype<riverbucketEvent | null>(
      store.get("riverbucketEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _category(): string {
    let value = this.get("_category");
    return value!.toString();
  }

  set _category(value: string) {
    this.set("_category", Value.fromString(value));
  }

  get _bucketValType(): i32 {
    let value = this.get("_bucketValType");
    return value!.toI32();
  }

  set _bucketValType(value: i32) {
    this.set("_bucketValType", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class riverpostEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save riverpostEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type riverpostEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("riverpostEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): riverpostEvent | null {
    return changetype<riverpostEvent | null>(
      store.get("riverpostEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _live(): boolean {
    let value = this.get("_live");
    return value!.toBoolean();
  }

  set _live(value: boolean) {
    this.set("_live", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
