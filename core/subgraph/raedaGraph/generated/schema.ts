// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class profileEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save profileEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type profileEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("profileEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): profileEvent | null {
    return changetype<profileEvent | null>(
      store.get("profileEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _userId(): BigInt {
    let value = this.get("_userId");
    return value!.toBigInt();
  }

  set _userId(value: BigInt) {
    this.set("_userId", Value.fromBigInt(value));
  }

  get _waterType(): i32 {
    let value = this.get("_waterType");
    return value!.toI32();
  }

  set _waterType(value: i32) {
    this.set("_waterType", Value.fromI32(value));
  }

  get _userName(): string {
    let value = this.get("_userName");
    return value!.toString();
  }

  set _userName(value: string) {
    this.set("_userName", Value.fromString(value));
  }

  get _summary(): string {
    let value = this.get("_summary");
    return value!.toString();
  }

  set _summary(value: string) {
    this.set("_summary", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class bidEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save bidEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type bidEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("bidEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): bidEvent | null {
    return changetype<bidEvent | null>(store.get("bidEvent", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _bidId(): BigInt {
    let value = this.get("_bidId");
    return value!.toBigInt();
  }

  set _bidId(value: BigInt) {
    this.set("_bidId", Value.fromBigInt(value));
  }

  get _accepted(): boolean {
    let value = this.get("_accepted");
    return value!.toBoolean();
  }

  set _accepted(value: boolean) {
    this.set("_accepted", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class bucketEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save bucketEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type bucketEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("bucketEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): bucketEvent | null {
    return changetype<bucketEvent | null>(
      store.get("bucketEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _category(): string {
    let value = this.get("_category");
    return value!.toString();
  }

  set _category(value: string) {
    this.set("_category", Value.fromString(value));
  }

  get _bucketValType(): i32 {
    let value = this.get("_bucketValType");
    return value!.toI32();
  }

  set _bucketValType(value: i32) {
    this.set("_bucketValType", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class postEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save postEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type postEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("postEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): postEvent | null {
    return changetype<postEvent | null>(
      store.get("postEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _live(): boolean {
    let value = this.get("_live");
    return value!.toBoolean();
  }

  set _live(value: boolean) {
    this.set("_live", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class riverbidEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save riverbidEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type riverbidEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("riverbidEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): riverbidEvent | null {
    return changetype<riverbidEvent | null>(
      store.get("riverbidEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _bidId(): BigInt {
    let value = this.get("_bidId");
    return value!.toBigInt();
  }

  set _bidId(value: BigInt) {
    this.set("_bidId", Value.fromBigInt(value));
  }

  get _accepted(): boolean {
    let value = this.get("_accepted");
    return value!.toBoolean();
  }

  set _accepted(value: boolean) {
    this.set("_accepted", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class riverbucketEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save riverbucketEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type riverbucketEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("riverbucketEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): riverbucketEvent | null {
    return changetype<riverbucketEvent | null>(
      store.get("riverbucketEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _category(): string {
    let value = this.get("_category");
    return value!.toString();
  }

  set _category(value: string) {
    this.set("_category", Value.fromString(value));
  }

  get _bucketValType(): i32 {
    let value = this.get("_bucketValType");
    return value!.toI32();
  }

  set _bucketValType(value: i32) {
    this.set("_bucketValType", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class riverpostEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save riverpostEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type riverpostEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("riverpostEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): riverpostEvent | null {
    return changetype<riverpostEvent | null>(
      store.get("riverpostEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _postId(): BigInt {
    let value = this.get("_postId");
    return value!.toBigInt();
  }

  set _postId(value: BigInt) {
    this.set("_postId", Value.fromBigInt(value));
  }

  get _live(): boolean {
    let value = this.get("_live");
    return value!.toBoolean();
  }

  set _live(value: boolean) {
    this.set("_live", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Profile extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Profile must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get userName(): string {
    let value = this.get("userName");
    return value!.toString();
  }

  set userName(value: string) {
    this.set("userName", Value.fromString(value));
  }

  get waterType(): string {
    let value = this.get("waterType");
    return value!.toString();
  }

  set waterType(value: string) {
    this.set("waterType", Value.fromString(value));
  }

  get EOAs(): Array<Bytes> | null {
    let value = this.get("EOAs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set EOAs(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("EOAs");
    } else {
      this.set("EOAs", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get Summary(): string {
    let value = this.get("Summary");
    return value!.toString();
  }

  set Summary(value: string) {
    this.set("Summary", Value.fromString(value));
  }

  get Bids(): Array<Bytes> | null {
    let value = this.get("Bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set Bids(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("Bids");
    } else {
      this.set("Bids", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get Posts(): Array<Bytes> | null {
    let value = this.get("Posts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set Posts(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("Posts");
    } else {
      this.set("Posts", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Post extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Post must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Post | null {
    return changetype<Post | null>(store.get("Post", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get postName(): string {
    let value = this.get("postName");
    return value!.toString();
  }

  set postName(value: string) {
    this.set("postName", Value.fromString(value));
  }

  get EOA(): Bytes {
    let value = this.get("EOA");
    return value!.toBytes();
  }

  set EOA(value: Bytes) {
    this.set("EOA", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get iXx(): BigInt {
    let value = this.get("iXx");
    return value!.toBigInt();
  }

  set iXx(value: BigInt) {
    this.set("iXx", Value.fromBigInt(value));
  }

  get iXy(): BigInt {
    let value = this.get("iXy");
    return value!.toBigInt();
  }

  set iXy(value: BigInt) {
    this.set("iXy", Value.fromBigInt(value));
  }

  get fXx(): BigInt {
    let value = this.get("fXx");
    return value!.toBigInt();
  }

  set fXx(value: BigInt) {
    this.set("fXx", Value.fromBigInt(value));
  }

  get fXy(): BigInt {
    let value = this.get("fXy");
    return value!.toBigInt();
  }

  set fXy(value: BigInt) {
    this.set("fXy", Value.fromBigInt(value));
  }

  get iT(): BigInt | null {
    let value = this.get("iT");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set iT(value: BigInt | null) {
    if (!value) {
      this.unset("iT");
    } else {
      this.set("iT", Value.fromBigInt(<BigInt>value));
    }
  }

  get fT(): BigInt | null {
    let value = this.get("fT");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fT(value: BigInt | null) {
    if (!value) {
      this.unset("fT");
    } else {
      this.set("fT", Value.fromBigInt(<BigInt>value));
    }
  }

  get exp(): BigInt {
    let value = this.get("exp");
    return value!.toBigInt();
  }

  set exp(value: BigInt) {
    this.set("exp", Value.fromBigInt(value));
  }

  get live(): boolean {
    let value = this.get("live");
    return value!.toBoolean();
  }

  set live(value: boolean) {
    this.set("live", Value.fromBoolean(value));
  }

  get bucket(): Array<Bytes> | null {
    let value = this.get("bucket");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set bucket(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("bucket");
    } else {
      this.set("bucket", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get pendingValue(): string | null {
    let value = this.get("pendingValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingValue(value: string | null) {
    if (!value) {
      this.unset("pendingValue");
    } else {
      this.set("pendingValue", Value.fromString(<string>value));
    }
  }

  get poster(): Bytes {
    let value = this.get("poster");
    return value!.toBytes();
  }

  set poster(value: Bytes) {
    this.set("poster", Value.fromBytes(value));
  }

  get Bids(): Array<Bytes> | null {
    let value = this.get("Bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set Bids(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("Bids");
    } else {
      this.set("Bids", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Bucket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bucket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Bucket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bucket", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Bucket | null {
    return changetype<Bucket | null>(store.get("Bucket", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get post(): Bytes | null {
    let value = this.get("post");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set post(value: Bytes | null) {
    if (!value) {
      this.unset("post");
    } else {
      this.set("post", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Bid extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Bid must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bid", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get EOA(): Bytes {
    let value = this.get("EOA");
    return value!.toBytes();
  }

  set EOA(value: Bytes) {
    this.set("EOA", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    return value!.toBoolean();
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    return value!.toBytes();
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }

  get post(): Bytes {
    let value = this.get("post");
    return value!.toBytes();
  }

  set post(value: Bytes) {
    this.set("post", Value.fromBytes(value));
  }
}
