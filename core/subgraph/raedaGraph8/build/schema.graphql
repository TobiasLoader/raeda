# type addressEvent @entity(immutable: true) {
#   id: Bytes!
#   _userId: Int! # uint16
#   param1: Bytes! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type profileEvent @entity(immutable: true) {
#   id: Bytes!
#   _userId: Int! # uint16
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }
# type bidEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   _bidId: Int! # uint16
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type bucketEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   _category: String! # string
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type postEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   _postState: Int! # uint8
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type resetEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }
# type riverbidEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   _bidId: Int! # uint16
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type riverbucketEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   _category: String! # string
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type riverpostEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   _postState: Int! # uint8
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type riverresetEvent @entity(immutable: true) {
#   id: Bytes!
#   _postId: Int! # uint16
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

#ASLDJBUHASFJKASF



enum waterTypes {
  LAKE
  RIVER
}


enum post_states {
  LIVE
  PENDING
  LAKECLOSED
  RIVERCLOSED
  CLOSED
}

type Profile @entity {
  id: Bytes!
  # userId: BigInt!
  profileName: String!
  waterType: waterTypes!
  EOAs: [Bytes!]
  description: String!
  bids: [Bid!] @derivedFrom(field: "bidder")
  posts: [Post!] @derivedFrom(field: "poster")
}

type Post @entity {
  id: Bytes!
  # postId: BigInt!
  postName: String!
  description: String
  # posterId: Bytes!
  # posterWaterType: waterTypes!
  EOA: Bytes!
  price: BigInt!
  iXx: BigInt
  iXy: BigInt
  fXx: BigInt
  fXy: BigInt
  iT: BigInt
  fT: BigInt
  exp: BigInt
  # bucketCategories: [String!]
  # bucketValues: [String!]
  bucket: [Bucket!] @derivedFrom(field: "post")
  postState: post_states!
  poster: Profile!
  bids: [Bid!] @derivedFrom(field: "post")
  winningBid: Bid
}

type Bucket @entity(immutable: true) {
  id: Bytes!
  category: String!
  value: String!
  post: Post!
}

# type lakePost @entity {
#   id: Bytes!
#   postName: String!
#   EOA: Bytes!
#   price: BigInt!
#   iXx: BigInt!
#   iXy: BigInt!
#   fXx: BigInt!
#   fXy: BigInt!
#   iT: BigInt
#   fT: BigInt
#   exp: BigInt!
#   live: Boolean!
#   bucketCategories: [String!]
#   bucketValues: [String!]
#   pendingValue: dealStates
# }

type Bid @entity {
  id: String!
  # bidId: BigInt!
  # postId: BigInt!
  # bidderId: BigInt!
  EOA: Bytes!
  amount: BigInt!
  bidder: Profile!
  post: Post!
}

# type lakeBidOnRiver @entity {
#   id: Bytes!
#   EOA: Bytes!
#   amount: BigInt!
#   accepted: Boolean
# }
# "ADD GRAPH STRUCTURE"

# "DECLARE SEARCH"
type _Schema_
  @fulltext(
    name: "Search"
    language: en
    algorithm: rank
    include: [{entity: "Post", fields: [{name: "postName", name: "description"}]},{entity:"Profile",fields:[{name:"profileName",name:"waterType",name:"description"}]},{entity: "Bucket",fields:[{name: "category"},{name: "value"}]}]
  # @fulltext(
  #   name: "profileSearch"
  #   language: en
  #   algorithm: rank
  #   include: [{entity:"Profile",fields:[{name:"profileName",name:"waterType",name:"description"}]}]
  # )
)


# type _Schema_
#     @fulltext(
#       name: "bucketSearch"
#       language: en
#       algorithm: rank
#       include: [{entity: "Bucket",fields:[{name: category},{name: value}]}]
# )

# type _Schema_
#     @fulltext(
#       name: "profileSearch"
#       language:en
#       algorithm: rank
#       include: [{entity: "Profile",fields:[{name:userName,name:Summary}]}]
#     )