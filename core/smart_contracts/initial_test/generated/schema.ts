// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class logEntry extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save logEntry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type logEntry must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("logEntry", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): logEntry | null {
    return changetype<logEntry | null>(store.get("logEntry", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _idb(): BigInt {
    let value = this.get("_idb");
    return value!.toBigInt();
  }

  set _idb(value: BigInt) {
    this.set("_idb", Value.fromBigInt(value));
  }

  get _providerID(): BigInt {
    let value = this.get("_providerID");
    return value!.toBigInt();
  }

  set _providerID(value: BigInt) {
    this.set("_providerID", Value.fromBigInt(value));
  }

  get _providerName(): string {
    let value = this.get("_providerName");
    return value!.toString();
  }

  set _providerName(value: string) {
    this.set("_providerName", Value.fromString(value));
  }

  get _providerAddress(): Bytes {
    let value = this.get("_providerAddress");
    return value!.toBytes();
  }

  set _providerAddress(value: Bytes) {
    this.set("_providerAddress", Value.fromBytes(value));
  }

  get _initialGeohash(): string {
    let value = this.get("_initialGeohash");
    return value!.toString();
  }

  set _initialGeohash(value: string) {
    this.set("_initialGeohash", Value.fromString(value));
  }

  get _finalGeohash(): string {
    let value = this.get("_finalGeohash");
    return value!.toString();
  }

  set _finalGeohash(value: string) {
    this.set("_finalGeohash", Value.fromString(value));
  }

  get _storageSpace(): BigInt {
    let value = this.get("_storageSpace");
    return value!.toBigInt();
  }

  set _storageSpace(value: BigInt) {
    this.set("_storageSpace", Value.fromBigInt(value));
  }

  get _live(): boolean {
    let value = this.get("_live");
    return value!.toBoolean();
  }

  set _live(value: boolean) {
    this.set("_live", Value.fromBoolean(value));
  }

  get _askingPrice(): BigInt {
    let value = this.get("_askingPrice");
    return value!.toBigInt();
  }

  set _askingPrice(value: BigInt) {
    this.set("_askingPrice", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class supEntry extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save supEntry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type supEntry must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("supEntry", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): supEntry | null {
    return changetype<supEntry | null>(store.get("supEntry", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _idb(): BigInt {
    let value = this.get("_idb");
    return value!.toBigInt();
  }

  set _idb(value: BigInt) {
    this.set("_idb", Value.fromBigInt(value));
  }

  get _supplierID(): BigInt {
    let value = this.get("_supplierID");
    return value!.toBigInt();
  }

  set _supplierID(value: BigInt) {
    this.set("_supplierID", Value.fromBigInt(value));
  }

  get _supplierName(): string {
    let value = this.get("_supplierName");
    return value!.toString();
  }

  set _supplierName(value: string) {
    this.set("_supplierName", Value.fromString(value));
  }

  get _supplierAddress(): Bytes {
    let value = this.get("_supplierAddress");
    return value!.toBytes();
  }

  set _supplierAddress(value: Bytes) {
    this.set("_supplierAddress", Value.fromBytes(value));
  }

  get _initialGeohash(): string {
    let value = this.get("_initialGeohash");
    return value!.toString();
  }

  set _initialGeohash(value: string) {
    this.set("_initialGeohash", Value.fromString(value));
  }

  get _finalGeohash(): string {
    let value = this.get("_finalGeohash");
    return value!.toString();
  }

  set _finalGeohash(value: string) {
    this.set("_finalGeohash", Value.fromString(value));
  }

  get _storageQuantity(): BigInt {
    let value = this.get("_storageQuantity");
    return value!.toBigInt();
  }

  set _storageQuantity(value: BigInt) {
    this.set("_storageQuantity", Value.fromBigInt(value));
  }

  get _live(): boolean {
    let value = this.get("_live");
    return value!.toBoolean();
  }

  set _live(value: boolean) {
    this.set("_live", Value.fromBoolean(value));
  }

  get _offerPrice(): BigInt {
    let value = this.get("_offerPrice");
    return value!.toBigInt();
  }

  set _offerPrice(value: BigInt) {
    this.set("_offerPrice", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
